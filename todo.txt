Blockworld Project Todo:

1. Build frame=DONE
    -implement board creator=DONE
    -some sort of state class (or equivalent)=DONE

2. Implement classes to make search possible=DONE
    -successor function--do on the fly?
        -actions=DONE
    -node class=DONE
    -solver class=DONE

2(a). Implement depth first search=DONE
    -add expand function=DONE
    -add some sort of basic ASCII problem viewer=DONE
    -implement pseudo code with stack=DONE
    -need to check if state is already visited=DONE
    -implement goal testing method=DONE
        *assuming that goal state only permits towers that start from the bottom
    -implement some sort of "solution" class=DONE
    -randomise moves=DONE

2(b). Implement breadth first search=DONE
    -replace dfs with a queue and see if it works=DONE

2(c). Implement iterative deepening search=DONE
    -make wrapper solution class=DONE
    -implement pseudo code for depth limited search=DONE
    -implement iterative deepening pseudo code=DONE
    -test depth limited is checking all nodes=DONE

2(d). Implement some form of heuristic search
    -think of a heuristic=DONE
    -program it=DONE
    -implement it with expand
    -possibly use a priority queue

2(e). Implement solution usage in 2(a) and 2(b)=DONE

4. Run each search with various problem sizes and record results

5. Graph it

6. Write report
    -description of methods
    -evidence of search methods in operation
    -example solutions
    -describe how problem difficulty was controlled
    -plot of results
    -brief discussion

EXTRA:

1. Stop impossible puzzles being made.
2. Iterative deepening recognises states already explored 
    -maybe just a dynamic depth depending on problem size
